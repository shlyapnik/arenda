import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import os

API_TOKEN = '5047371265:AAHdC6RXacQ2tdx70yjaLxEi0V-OLp7JA4I'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

conn = sqlite3.connect('database.db')
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS posts
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   user_id INTEGER,
                   address TEXT,
                   floor TEXT,
                   rooms TEXT,
                   status TEXT,
                   amenities TEXT,
                   price TEXT,
                   phone TEXT,
                   photos TEXT)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS channels
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   name TEXT,
                   channel_id TEXT)''')

conn.commit()


class Form(StatesGroup):
    address = State()
    floor = State()
    rooms = State()
    status = State()
    amenities = State()
    price = State()
    phone = State()
    photos = State()


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_post –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")


@dp.message_handler(commands=['create_post'])
async def create_post(message: types.Message):
    await Form.address.set()
    await message.reply("–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")


@dp.message_handler(state=Form.address)
async def process_address(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['address'] = message.text
    await Form.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂:")


@dp.message_handler(state=Form.floor)
async def process_floor(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['floor'] = message.text
    await Form.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:")


@dp.message_handler(state=Form.rooms)
async def process_rooms(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['rooms'] = message.text
    await Form.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞):")


@dp.message_handler(state=Form.status)
async def process_status(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['status'] = message.text
    await Form.next()
    await message.reply("–ß—Ç–æ –µ—Å—Ç—å –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ? (–ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")


@dp.message_handler(state=Form.amenities)
async def process_amenities(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['amenities'] = message.text
    await Form.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã:")


@dp.message_handler(state=Form.price)
async def process_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = message.text
    await Form.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")


@dp.message_handler(state=Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.text
    await Form.next()
    await message.reply("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã (–¥–æ 5 —à—Ç—É–∫). –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ'.")


@dp.message_handler(state=Form.photos, content_types=['photo'])
async def process_photos(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if 'photos' not in data:
            data['photos'] = []
        data['photos'].append(message.photo[-1].file_id)

    if len(data['photos']) < 5:
        await message.reply("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ', –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏.")
    else:
        await message.reply("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ. –ù–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")


@dp.message_handler(lambda message: message.text.lower() == '–≥–æ—Ç–æ–≤–æ', state=Form.photos)
async def process_done(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ –±—ã–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        if 'photos' not in data or len(data['photos']) == 0:
            await message.reply("–í—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
        cursor.execute('''INSERT INTO posts (user_id, address, floor, rooms, status, amenities, price, phone, photos)
                          VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                       (message.from_user.id, data['address'], data['floor'], data['rooms'], data['status'],
                        data['amenities'], data['price'], data['phone'], ','.join(data['photos'])))
        conn.commit()
        post_id = cursor.lastrowid

    await state.finish()
    await send_post_to_admin(post_id)
    await message.reply("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


async def send_post_to_admin(post_id):
    admin_id = 149891069  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    cursor.execute("SELECT * FROM posts WHERE id = ?", (post_id,))
    post = cursor.fetchone()

    text = f"""
üì¢ #–°–¥–∞–µ—Ç—Å—è –≤ –∞—Ä–µ–Ω–¥—É

üìç –ê–¥—Ä–µ—Å: {post[2]}
üè† –≠—Ç–∞–∂: {post[3]}
‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {post[4]}
üè† –°—Ç–∞—Ç—É—Å: {post[5]}
‚úÖ –ß—Ç–æ –µ—Å—Ç—å –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ: {post[6]}
‚úÖ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä

üí∏ –¶–µ–Ω–∞: {post[7]}

üìû –¢–µ–ª: {post[8]}
    """

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_{post_id}"))
    keyboard.add(InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{post_id}"))

    photo_ids = post[9].split(',')
    media = [types.InputMediaPhoto(media=photo_id, caption=text if i == 0 else '') for i, photo_id in
             enumerate(photo_ids)]

    await bot.send_media_group(admin_id, media)
    await bot.send_message(admin_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith('publish_'))
async def process_publish(callback_query: types.CallbackQuery):
    post_id = int(callback_query.data.split('_')[1])
    cursor.execute("SELECT * FROM posts WHERE id = ?", (post_id,))
    post = cursor.fetchone()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
    cursor.execute("SELECT * FROM channels")
    channels = cursor.fetchall()

    keyboard = InlineKeyboardMarkup()
    for channel in channels:
        keyboard.add(InlineKeyboardButton(channel[1], callback_data=f"send_{post_id}_{channel[2]}"))

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith('send_'))
async def send_to_channel(callback_query: types.CallbackQuery):
    _, post_id, channel_id = callback_query.data.split('_')
    post_id = int(post_id)

    cursor.execute("SELECT * FROM posts WHERE id = ?", (post_id,))
    post = cursor.fetchone()

    text = f"""
üì¢ #–°–¥–∞–µ—Ç—Å—è –≤ –∞—Ä–µ–Ω–¥—É

üìç –ê–¥—Ä–µ—Å: {post[2]}
üè† –≠—Ç–∞–∂: {post[3]}
‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {post[4]}
üè† –°—Ç–∞—Ç—É—Å: {post[5]}
‚úÖ –ß—Ç–æ –µ—Å—Ç—å –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ: {post[6]}
‚úÖ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä

üí∏ –¶–µ–Ω–∞: {post[7]}

üìû –¢–µ–ª: {post[8]}
    """

    photo_ids = post[9].split(',')
    media = [types.InputMediaPhoto(media=photo_id, caption=text if i == 0 else '') for i, photo_id in
             enumerate(photo_ids)]

    await bot.send_media_group(channel_id, media)

    await bot.answer_callback_query(callback_query.id, "–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")


@dp.callback_query_handler(lambda c: c.data.startswith('reject_'))
async def process_reject(callback_query: types.CallbackQuery):
    post_id = int(callback_query.data.split('_')[1])
    cursor.execute("DELETE FROM posts WHERE id = ?", (post_id,))
    conn.commit()
    await bot.answer_callback_query(callback_query.id, "–ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")


@dp.message_handler(commands=['add_channel'])
async def add_channel(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ –µ–≥–æ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–π –∫–∞–Ω–∞–ª, -100123456789)")


@dp.message_handler(lambda message: ',' in message.text)
async def process_add_channel(message: types.Message):
    name, channel_id = message.text.split(',')
    name = name.strip()
    channel_id = channel_id.strip()

    cursor.execute("INSERT INTO channels (name, channel_id) VALUES (?, ?)", (name, channel_id))
    conn.commit()

    await message.reply(f"–ö–∞–Ω–∞–ª '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")


@dp.message_handler(commands=['list_channels'])
async def list_channels(message: types.Message):
    cursor.execute("SELECT * FROM channels")
    channels = cursor.fetchall()

    if channels:
        response = "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:\n\n"
        for channel in channels:
            response += f"{channel[1]} (ID: {channel[2]})\n"
    else:
        response = "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç."

    await message.reply(response)


if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)